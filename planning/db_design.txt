// // Use DBML to define your database structure
// // Docs: https://dbml.dbdiagram.io/docs

// Table followers {
//   following_user_id integer
//   followed_user_id integer
//   created_at timestamp 
// }

// Table users {
//   id integer [primary key]
//   username varchar
//   role varchar
//   created_at timestamp
// }

// Table posts {
//   id integer [primary key]
//   title varchar
//   body text [note: 'Content of the post']
//   user_id integer
//   status varchar
//   created_at timestamp
// }

// Ref: posts.user_id > users.id // many-to-one

// Ref: users.id < follows.following_user_id

// Ref: users.id < follows.followed_user_id

Table teams_and_projects {
  team_id integer
  project_id integer
}

Table teams_and_users {
  team_id integer
  user_id integer
  role integer
  tasks__completed integer
}

Table projects {
  id integer [primary key]
  name varchar
  description text
  start_date timestamp
  deadline timestamp
  __created_on timestamp
  __modified_on timestamp
}

Table teams {
  id integer [primary key]
  name varchar
  description text
  picture image
}

Table users { 
  id integer [primary key]
  bio text
  account_id integer
  name varchar
  picture image
  __created_on timestamp
}

Table accounts {
  id integer [primary key]
  email email
  password password
  user_id integer
}

Table tasks {
  id integer [primary key]
  description text
  goal_id integer
  team_id integer
  assignee integer
  state integer
  priority integer
}

Table comments {
  id integer [primary key]
  comment text
  user_id integer
  task_id integer 
  _created_on timestamp
}

Ref: projects.id > teams_and_projects.project_id
Ref: teams.id > teams_and_projects.team_id

Ref: tasks.team_id > teams.id
Ref: tasks.assignee > users.id
Ref: teams.id > teams_and_users.team_id
Ref: users.id > teams_and_users.user_id
Ref: accounts.user_id > users.id
Ref: users.account_id > accounts.id
Ref: tasks.id > comments.task_id
Ref: users.id > comments.user_id
